<?php

define ( 'APP_PATH', realpath ( dirname ( __FILE__ ) . '/app' ) );
define ( 'LIB_PATH', realpath ( dirname ( __FILE__ ) . '/lib' ) );

define ( 'FLIGHT_PATH', LIB_PATH . '/flight' );
define ( 'PARIS_PATH', LIB_PATH . '/paris' );
define ( 'MARKDOWN_PATH', LIB_PATH. '/php-markdown' );
define ( 'PLAYA_PATH', LIB_PATH . '/playa' );
define ( 'HYBRIDCACHE_PATH', LIB_PATH .'/HybridCache' );
define ( 'FEED_WRITER_PATH', LIB_PATH .'/FeedWriter' );

require FLIGHT_PATH.'/Flight.php';
require PARIS_PATH.'/paris.php';
require MARKDOWN_PATH.'/markdown.php';
require PLAYA_PATH.'/playa.php';
require HYBRIDCACHE_PATH.'/lib/init.php';

set_include_path(get_include_path() . PATH_SEPARATOR . FLIGHT_PATH);
set_include_path(get_include_path() . PATH_SEPARATOR . APP_PATH);
set_include_path(get_include_path() . PATH_SEPARATOR . APP_PATH . '/model');

Flight::set('flight.lib.path', APP_PATH);
Flight::set('flight.views.path', APP_PATH.'/view');

// blablabla

ini_set('display_errors',false);

/****  CONFIGURE YOUR DOMAIN AND DB HERE  ****/ 


define ( 'SITE_TITLE', 'My F2P node' );
define ( 'SITE_DESCRIPTION', 'Another Flight to Paris node' );
define ( 'DOMAIN', 'localhost' );

ORM::configure('mysql:host=localhost;dbname=f2p');
ORM::configure('username', 'root');
ORM::configure('password', '');


/****  AND DOWN THE RABBIT HOLE  ****/



define ( 'PAGESIZE', 30 );
define ( 'MAX_PAGESIZE', 100 );

## FILES

define( 'MAX_UPLOAD_SIZE', 1024 * 1024 * 8 );
define( 'KB_PER_POINT', 10 );
define( 'UPLOAD_PATH', realpath(dirname(__FILE__).'/files') );

## LINK TYPES DON'T CHANGE IF YOU WANT TO SINC RELATIONS ##

define ( 'SITE_URI', 'http://'.DOMAIN );
define ( 'REPLY_URI', SITE_URI.'/reply');
define ( 'AUTHOR_URI', 'dc:creator' );

$allowed_formats = array('html','rss','atom','json','rdf','md');

## Cache configuration

define ( 'CACHE_ENABLED', true );
define ( 'CACHE_EXPIRE_TIME', 60*15 ); // 15 minutes
define ( 'CACHE_EXPIRE_WAITING', 1 ); // 1 second

## Configure Cache meadias:

use Hybrid\Cache as HybridCache;
use Hybrid\Storages\Disk as DiskSorage;

HybridCache::addStorageMedia(new DiskSorage(dirname(__FILE__).'/cache'));
